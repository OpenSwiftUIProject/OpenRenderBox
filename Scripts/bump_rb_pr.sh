#!/bin/zsh

set -e

# A `realpath` alternative using the default C implementation.
filepath() {
  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

# Capture script name for usage display
SCRIPT_NAME="$(basename "$0")"

# Usage function
show_usage() {
  cat << EOF
Usage: $SCRIPT_NAME [branch] [--force] [--help]

Automated script to update DarwinPrivateFrameworks with RenderBox changes.

Arguments:
  branch          Target branch to generate from (default: main)

Options:
  --force         Force push the branch when creating PR
  --help          Show this help message

Examples:
  $SCRIPT_NAME                    # Update from main branch
  $SCRIPT_NAME develop            # Update from develop branch
  $SCRIPT_NAME main --force       # Update from main with force push
  $SCRIPT_NAME --help             # Show this help

Description:
  This script automates the process of updating DarwinPrivateFrameworks
  with the latest RenderBox changes by:
  1. Setting up a git worktree for the target branch
  2. Cloning DarwinPrivateFrameworks repository
  3. Generating RB template from OpenRenderBox
  4. Updating headers and Swift interface templates
  5. Creating and pushing a PR with the changes
EOF
}

# Parse command line arguments
TARGET_BRANCH="main"
FORCE_PUSH=""

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --help)
      show_usage
      exit 0
      ;;
    --force)
      FORCE_PUSH="--force"
      shift
      ;;
    *)
      TARGET_BRANCH="$1"
      shift
      ;;
  esac
done

SCRIPT_ROOT="$(dirname $(dirname $(filepath $0)))"
ORB_REPO_DIR="$SCRIPT_ROOT/.orb_repo"
OPENRENDERBOX_ROOT="$ORB_REPO_DIR"
RB_REPO_DIR="$SCRIPT_ROOT/.rb_repo"

echo "Starting DarwinPrivateFrameworks bump PR workflow..."
echo "Target branch: $TARGET_BRANCH"
if [[ -n "$FORCE_PUSH" ]]; then
  echo "Force push: enabled"
fi

# Cleanup function
cleanup() {
  if [[ -d "$RB_REPO_DIR" ]]; then
    echo "Cleaning up temporary repository..."
    rm -rf "$RB_REPO_DIR"
  fi
  if [[ -d "$ORB_REPO_DIR" ]]; then
    echo "Cleaning up git worktree..."
    cd "$SCRIPT_ROOT"
    git worktree remove --force "$ORB_REPO_DIR" 2>/dev/null || true
  fi
}

# Set trap to cleanup on exit
trap cleanup EXIT

cd "$SCRIPT_ROOT"

# Step 1: Setup git worktree for target branch
echo "Setting up git worktree for branch: $TARGET_BRANCH"
if [[ -d "$ORB_REPO_DIR" ]]; then
  git worktree remove --force "$ORB_REPO_DIR" 2>/dev/null || true
fi

git worktree add "$ORB_REPO_DIR" "$TARGET_BRANCH"

# Step 2: Clone DarwinPrivateFrameworks repository
echo "Cloning DarwinPrivateFrameworks repository..."
if [[ -d "$RB_REPO_DIR" ]]; then
  rm -rf "$RB_REPO_DIR"
fi

gh repo clone OpenSwiftUIProject/DarwinPrivateFrameworks "$RB_REPO_DIR"

# Step 3: Create new branch based on target branch name
echo "Creating new branch: update-rb-$TARGET_BRANCH"
cd "$RB_REPO_DIR"
git checkout -b "update-rb-$TARGET_BRANCH"

# Step 4: Generate RB template
echo "Generating RB template..."
cd "$OPENRENDERBOX_ROOT"
./Scripts/gen_rb_template.sh

# Step 5: Update DarwinPrivateFrameworks with generated content
echo "Updating DarwinPrivateFrameworks content..."

# Update headers in Sources/Headers
if [[ -d ".rb_template/Headers" ]]; then
  echo "Updating headers..."
  rm -rf "$RB_REPO_DIR/RB/2024/Sources/Headers"/*
  cp -r .rb_template/Headers/* "$RB_REPO_DIR/RB/2024/Sources/Headers/"
fi

# Step 6: Commit changes in DarwinPrivateFrameworks
echo "Committing changes..."
cd "$RB_REPO_DIR"

git add .
if git diff --staged --quiet; then
  echo "No changes to commit"
else
  git commit -m "feat(rb): Update RenderBox from OpenRenderBox $TARGET_BRANCH

- Updated headers from OpenRenderBox sources
- Generated from OpenRenderBox branch: $TARGET_BRANCH"
fi

# Step 7: Update xcframeworks
echo "Updating xcframeworks..."
swift package update-xcframeworks --allow-writing-to-package-directory

# Commit xcframework updates
git add .
if git diff --staged --quiet; then
  echo "No xcframework changes to commit"
else
  git commit -m "chore(generated): Update RB framework"
fi

# Step 8: Push branch and create PR
echo "Pushing branch and creating PR..."
git push origin "update-rb-$TARGET_BRANCH" $FORCE_PUSH

# Create PR
PR_TITLE="Update RenderBox from OpenRenderBox $TARGET_BRANCH"
PR_BODY="Automated update of RenderBox framework from OpenRenderBox.

**Changes:**
- Updated headers from OpenRenderBox sources
- Updated xcframework binaries

**Source Branch:** $TARGET_BRANCH
**Generated by:** OpenRenderBox bump script"

gh pr create \
  --title "$PR_TITLE" \
  --body "$PR_BODY" \
  --head "update-rb-$TARGET_BRANCH" \
  --base main

echo "âœ… PR created successfully!"
echo "Branch: update-rb-$TARGET_BRANCH"
